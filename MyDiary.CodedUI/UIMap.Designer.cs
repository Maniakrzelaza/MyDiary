// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MyDiary.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Login - Use 'LoginParams' to pass parameters into this method.
        /// </summary>
        public void Login()
        {
            #region Variable Declarations
            WinEdit uILoginEdit = this.UIIndexMyDiaryMozillaFWindow.UILoginHyperlink.UILoginEdit;
            WinEdit uIEmailEdit = this.UILoginMyDiaryMozillaFWindow.UILoginMyDiaryDocument.UIEmailEdit;
            WinEdit uIPasswordEdit = this.UILoginMyDiaryMozillaFWindow.UILoginMyDiaryDocument.UIPasswordEdit;
            WinButton uILoginButton = this.UILoginMyDiaryMozillaFWindow.UILoginMyDiaryDocument.UILoginButton;
            WinButton uILogoutButton = this.UILoginMyDiaryMozillaFWindow1.UIItemListItem.UILogoutButton;
            #endregion

            // Click 'Login' text box
            Mouse.Click(uILoginEdit, new Point(30, 10));

            // Type 'admin@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.LoginParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            Keyboard.SendKeys(uIPasswordEdit, this.LoginParams.UIPasswordEditSendKeys, true);

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(51, 28));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(65, 29));
        }
        
        /// <summary>
        /// GoToArticleDetails - Use 'GoToArticleDetailsParams' to pass parameters into this method.
        /// </summary>
        public void GoToArticleDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIEmailEdit;
            HtmlCustom uIAccountCustom = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIAccountCustom;
            HtmlEdit uIPasswordEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIAccountCustom.UILoginButton;
            HtmlHyperlink uIDetailsHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UIDetailsHyperlink;
            #endregion

            // Click 'Login' link
            Mouse.Click(uILoginHyperlink, new Point(38, 20));

            // Type 'admin@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.GoToArticleDetailsParams.UIEmailEditText;

            // Click 'account' custom control
            Mouse.Click(uIAccountCustom, new Point(140, 329));

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.GoToArticleDetailsParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(60, 20));

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(42, 18));
        }
        
        /// <summary>
        /// CheckProfileTabs
        /// </summary>
        public void CheckProfileTabs()
        {
            #region Variable Declarations
            WinEdit uIHelloadmingmailcomEdit = this.UIIndexMyDiaryMozillaFWindow2.UIHelloadmingmailcomHyperlink.UIHelloadmingmailcomEdit;
            WinEdit uIPersonaldataEdit = this.UIIndexMyDiaryMozillaFWindow3.UIPersonaldataHyperlink.UIPersonaldataEdit;
            WinEdit uITwofactorauthenticatEdit = this.UIIndexMyDiaryMozillaFWindow4.UITwofactorauthenticatHyperlink.UITwofactorauthenticatEdit;
            WinEdit uIPasswordEdit = this.UIIndexMyDiaryMozillaFWindow5.UIPasswordHyperlink.UIPasswordEdit;
            WinEdit uIProfileEdit = this.UIIndexMyDiaryMozillaFWindow6.UIProfileHyperlink.UIProfileEdit;
            #endregion

            // Click 'Hello admin@gmail.com!' text box
            Mouse.Click(uIHelloadmingmailcomEdit, new Point(116, 16));

            // Click 'Personal data' text box
            Mouse.Click(uIPersonaldataEdit, new Point(94, 19));

            // Click 'Two-factor authentication' text box
            Mouse.Click(uITwofactorauthenticatEdit, new Point(65, 35));

            // Click 'Password' text box
            Mouse.Click(uIPasswordEdit, new Point(57, 25));

            // Click 'Profile' text box
            Mouse.Click(uIProfileEdit, new Point(45, 18));
        }
        
        /// <summary>
        /// ProfileUsernameContainsAdmin - Use 'ProfileUsernameContainsAdminExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ProfileUsernameContainsAdmin()
        {
            #region Variable Declarations
            WinEdit uIUsernameEdit = this.UIProfileMyDiaryMozillWindow.UIProfileMyDiaryDocument.UIUsernameEdit;
            #endregion

            // Verify that the 'Text' property of 'Username' text box contains 'admin'
            StringAssert.Contains(uIUsernameEdit.Text, this.ProfileUsernameContainsAdminExpectedValues.UIUsernameEditText);

            // Verify that the 'Text' property of 'Username' text box contains 'admin'
            StringAssert.Contains(uIUsernameEdit.Text, this.ProfileUsernameContainsAdminExpectedValues.UIUsernameEditText1);
        }
        
        /// <summary>
        /// LoginToAdmin - Use 'LoginToAdminParams' to pass parameters into this method.
        /// </summary>
        public void LoginToAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIAccountCustom.UILoginButton;
            #endregion

            // Click 'Login' link
            Mouse.Click(uILoginHyperlink, new Point(34, 31));

            // Type 'admin@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.LoginToAdminParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LoginToAdminParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(57, 21));
        }
        
        /// <summary>
        /// CheckIfHelloBannerExists - Use 'CheckIfHelloBannerExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckIfHelloBannerExists()
        {
            #region Variable Declarations
            HtmlHyperlink uIHelloadmingmailcomHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UIHelloadmingmailcomHyperlink;
            #endregion

            // Verify that the 'FriendlyName' property of 'Hello admin@gmail.com!' link equals 'Hello admin@gmail.com!'
            Assert.AreEqual(this.CheckIfHelloBannerExistsExpectedValues.UIHelloadmingmailcomHyperlinkFriendlyName, uIHelloadmingmailcomHyperlink.FriendlyName);
        }
        
        /// <summary>
        /// LoginAndLogout - Use 'LoginAndLogoutParams' to pass parameters into this method.
        /// </summary>
        public void LoginAndLogout()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIAccountCustom.UILoginButton;
            HtmlButton uILogoutButton = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UILogoutButton;
            #endregion

            // Click 'Login' link
            Mouse.Click(uILoginHyperlink, new Point(33, 14));

            // Type 'admin@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.LoginAndLogoutParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LoginAndLogoutParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(56, 24));

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(43, 23));
        }
        
        /// <summary>
        /// LoginButtonShouldExists - Use 'LoginButtonShouldExistsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LoginButtonShouldExists()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UILoginHyperlink;
            #endregion

            // Verify that the 'FriendlyName' property of 'Login' link equals 'Login'
            Assert.AreEqual(this.LoginButtonShouldExistsExpectedValues.UILoginHyperlinkFriendlyName, uILoginHyperlink.FriendlyName);
        }
        
        /// <summary>
        /// ArticleShouldHaveProperTitle - Use 'ArticleShouldHaveProperTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ArticleShouldHaveProperTitle()
        {
            #region Variable Declarations
            HtmlCell uISuperArticleCell = this.UIIndexMyDiaryInternetWindow.UIDetailsMyDiaryDocument.UIItemTable.UISuperArticleCell;
            #endregion

            // Verify that the 'FriendlyName' property of 'Super Article' cell equals 'Super Article'
            Assert.AreEqual(this.ArticleShouldHaveProperTitleExpectedValues.UISuperArticleCellFriendlyName, uISuperArticleCell.FriendlyName);
        }
        
        /// <summary>
        /// ReturnToMainPage
        /// </summary>
        public void ReturnToMainPage()
        {
            #region Variable Declarations
            HtmlHyperlink uIMyDiaryHyperlink = this.UIIndexMyDiaryInternetWindow.UIDetailsMyDiaryDocument.UIMyDiaryHyperlink;
            #endregion

            // Click 'MyDiary' link
            Mouse.Click(uIMyDiaryHyperlink, new Point(37, 21));
        }
        
        /// <summary>
        /// Logout
        /// </summary>
        public void Logout()
        {
            #region Variable Declarations
            HtmlButton uILogoutButton = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UILogoutButton;
            #endregion

            // Click 'Logout' button
            Mouse.Click(uILogoutButton, new Point(52, 30));
        }
        
        /// <summary>
        /// GoToProfilePanel
        /// </summary>
        public void GoToProfilePanel()
        {
            #region Variable Declarations
            HtmlHyperlink uIHelloadmingmailcomHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UIHelloadmingmailcomHyperlink;
            #endregion

            // Click 'Hello admin@gmail.com!' link
            Mouse.Click(uIHelloadmingmailcomHyperlink, new Point(167, 14));
        }
        
        /// <summary>
        /// CheckIfUserHasMailOnProfilePage - Use 'CheckIfUserHasMailOnProfilePageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckIfUserHasMailOnProfilePage()
        {
            #region Variable Declarations
            HtmlEdit uIEmailEdit = this.UIIndexMyDiaryInternetWindow.UIProfileMyDiaryDocument.UIEmailEdit;
            #endregion

            // Verify that the 'Text' property of 'Email' text box equals 'admin@gmail.com'
            Assert.AreEqual(this.CheckIfUserHasMailOnProfilePageExpectedValues.UIEmailEditText, uIEmailEdit.Text);
        }
        
        /// <summary>
        /// GoToRootPageFromProfielPanel
        /// </summary>
        public void GoToRootPageFromProfielPanel()
        {
            #region Variable Declarations
            HtmlHyperlink uIMyDiaryHyperlink = this.UIIndexMyDiaryInternetWindow.UIProfileMyDiaryDocument.UIMyDiaryHyperlink;
            #endregion

            // Click 'MyDiary' link
            Mouse.Click(uIMyDiaryHyperlink, new Point(60, 30));
        }
        
        /// <summary>
        /// GoToArticleDetailsThenAddCommentThenBack
        /// </summary>
        public void GoToArticleDetailsThenAddCommentThenBack()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument1.UIDetailsHyperlink;
            HtmlHyperlink uIAddacommentHyperlink = this.UIIndexMyDiaryInternetWindow.UIDetailsMyDiaryDocument.UIAddacommentHyperlink;
            HtmlHyperlink uIBacktoListHyperlink = this.UIIndexMyDiaryInternetWindow.UICreateMyDiaryDocument.UIBacktoListHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(12, 18));

            // Click 'Add a comment' link
            Mouse.Click(uIAddacommentHyperlink, new Point(116, 20));

            // Click 'Back to List' link
            Mouse.Click(uIBacktoListHyperlink, new Point(27, 25));
        }
        
        /// <summary>
        /// CheckIfCommentIndexPageIsShown - Use 'CheckIfCommentIndexPageIsShownExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckIfCommentIndexPageIsShown()
        {
            #region Variable Declarations
            HtmlCustom uIItemCustom = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument2.UIItemCustom;
            #endregion

            // Verify that the 'InnerText' property of custom control equals 'My Comments'
            Assert.AreEqual(this.CheckIfCommentIndexPageIsShownExpectedValues.UIItemCustomInnerText, uIItemCustom.InnerText);
        }
        
        /// <summary>
        /// GoToArticleDelete
        /// </summary>
        public void GoToArticleDelete()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument.UIDeleteHyperlink;
            #endregion

            // Click 'Delete |' link
            Mouse.Click(uIDeleteHyperlink, new Point(45, 16));
        }
        
        /// <summary>
        /// ShouldHaveDeleteButton - Use 'ShouldHaveDeleteButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ShouldHaveDeleteButton()
        {
            #region Variable Declarations
            HtmlInputButton uIDeleteButton = this.UIIndexMyDiaryInternetWindow.UIDeleteMyDiaryDocument.UIDeleteButton;
            #endregion

            // Verify that the 'DisplayText' property of 'Delete' button equals 'Delete'
            Assert.AreEqual(this.ShouldHaveDeleteButtonExpectedValues.UIDeleteButtonDisplayText, uIDeleteButton.DisplayText);
        }
        
        /// <summary>
        /// GoToArticleCommentDelete
        /// </summary>
        public void GoToArticleCommentDelete()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument1.UIDetailsHyperlink;
            HtmlHyperlink uIDeleteHyperlink = this.UIIndexMyDiaryInternetWindow.UIDetailsMyDiaryDocument.UIDeleteHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(31, 22));

            // Click 'Delete |' link
            Mouse.Click(uIDeleteHyperlink, new Point(31, 20));
        }
        
        /// <summary>
        /// ShouldHaveCommentDeleteButton - Use 'ShouldHaveCommentDeleteButtonExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ShouldHaveCommentDeleteButton()
        {
            #region Variable Declarations
            HtmlInputButton uIDeleteButton = this.UIIndexMyDiaryInternetWindow.UIDeleteMyDiaryDocument1.UIDeleteButton;
            #endregion

            // Verify that the 'DisplayText' property of 'Delete' button equals 'Delete'
            Assert.AreEqual(this.ShouldHaveCommentDeleteButtonExpectedValues.UIDeleteButtonDisplayText, uIDeleteButton.DisplayText);
        }
        
        /// <summary>
        /// TypeWrongLoginCredentials - Use 'TypeWrongLoginCredentialsParams' to pass parameters into this method.
        /// </summary>
        public void TypeWrongLoginCredentials()
        {
            #region Variable Declarations
            HtmlEdit uIEmailEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIAccountCustom.UILoginButton;
            #endregion

            // Type 'badinput@gmail.com' in 'Email' text box
            uIEmailEdit.Text = this.TypeWrongLoginCredentialsParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.TypeWrongLoginCredentialsParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(45, 23));
        }
        
        /// <summary>
        /// ShouldDisplayInvalidLoginMessage - Use 'ShouldDisplayInvalidLoginMessageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ShouldDisplayInvalidLoginMessage()
        {
            #region Variable Declarations
            HtmlCustom uIInvalidloginattemptCustom = this.UIIndexMyDiaryInternetWindow.UILoginMyDiaryDocument.UIAccountCustom.UIInvalidloginattemptCustom;
            #endregion

            // Verify that the 'InnerText' property of 'Invalid login attempt.' custom control equals 'Invalid login attempt.'
            Assert.AreEqual(this.ShouldDisplayInvalidLoginMessageExpectedValues.UIInvalidloginattemptCustomInnerText, uIInvalidloginattemptCustom.InnerText);
        }
        
        /// <summary>
        /// GoToLoginPage
        /// </summary>
        public void GoToLoginPage()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIIndexMyDiaryInternetWindow.UIIndexMyDiaryDocument1.UILoginHyperlink;
            #endregion

            // Click 'Login' link
            Mouse.Click(uILoginHyperlink, new Point(37, 19));
        }
        
        #region Properties
        public virtual LoginParams LoginParams
        {
            get
            {
                if ((this.mLoginParams == null))
                {
                    this.mLoginParams = new LoginParams();
                }
                return this.mLoginParams;
            }
        }
        
        public virtual GoToArticleDetailsParams GoToArticleDetailsParams
        {
            get
            {
                if ((this.mGoToArticleDetailsParams == null))
                {
                    this.mGoToArticleDetailsParams = new GoToArticleDetailsParams();
                }
                return this.mGoToArticleDetailsParams;
            }
        }
        
        public virtual ProfileUsernameContainsAdminExpectedValues ProfileUsernameContainsAdminExpectedValues
        {
            get
            {
                if ((this.mProfileUsernameContainsAdminExpectedValues == null))
                {
                    this.mProfileUsernameContainsAdminExpectedValues = new ProfileUsernameContainsAdminExpectedValues();
                }
                return this.mProfileUsernameContainsAdminExpectedValues;
            }
        }
        
        public virtual LoginToAdminParams LoginToAdminParams
        {
            get
            {
                if ((this.mLoginToAdminParams == null))
                {
                    this.mLoginToAdminParams = new LoginToAdminParams();
                }
                return this.mLoginToAdminParams;
            }
        }
        
        public virtual CheckIfHelloBannerExistsExpectedValues CheckIfHelloBannerExistsExpectedValues
        {
            get
            {
                if ((this.mCheckIfHelloBannerExistsExpectedValues == null))
                {
                    this.mCheckIfHelloBannerExistsExpectedValues = new CheckIfHelloBannerExistsExpectedValues();
                }
                return this.mCheckIfHelloBannerExistsExpectedValues;
            }
        }
        
        public virtual LoginAndLogoutParams LoginAndLogoutParams
        {
            get
            {
                if ((this.mLoginAndLogoutParams == null))
                {
                    this.mLoginAndLogoutParams = new LoginAndLogoutParams();
                }
                return this.mLoginAndLogoutParams;
            }
        }
        
        public virtual LoginButtonShouldExistsExpectedValues LoginButtonShouldExistsExpectedValues
        {
            get
            {
                if ((this.mLoginButtonShouldExistsExpectedValues == null))
                {
                    this.mLoginButtonShouldExistsExpectedValues = new LoginButtonShouldExistsExpectedValues();
                }
                return this.mLoginButtonShouldExistsExpectedValues;
            }
        }
        
        public virtual ArticleShouldHaveProperTitleExpectedValues ArticleShouldHaveProperTitleExpectedValues
        {
            get
            {
                if ((this.mArticleShouldHaveProperTitleExpectedValues == null))
                {
                    this.mArticleShouldHaveProperTitleExpectedValues = new ArticleShouldHaveProperTitleExpectedValues();
                }
                return this.mArticleShouldHaveProperTitleExpectedValues;
            }
        }
        
        public virtual CheckIfUserHasMailOnProfilePageExpectedValues CheckIfUserHasMailOnProfilePageExpectedValues
        {
            get
            {
                if ((this.mCheckIfUserHasMailOnProfilePageExpectedValues == null))
                {
                    this.mCheckIfUserHasMailOnProfilePageExpectedValues = new CheckIfUserHasMailOnProfilePageExpectedValues();
                }
                return this.mCheckIfUserHasMailOnProfilePageExpectedValues;
            }
        }
        
        public virtual CheckIfCommentIndexPageIsShownExpectedValues CheckIfCommentIndexPageIsShownExpectedValues
        {
            get
            {
                if ((this.mCheckIfCommentIndexPageIsShownExpectedValues == null))
                {
                    this.mCheckIfCommentIndexPageIsShownExpectedValues = new CheckIfCommentIndexPageIsShownExpectedValues();
                }
                return this.mCheckIfCommentIndexPageIsShownExpectedValues;
            }
        }
        
        public virtual ShouldHaveDeleteButtonExpectedValues ShouldHaveDeleteButtonExpectedValues
        {
            get
            {
                if ((this.mShouldHaveDeleteButtonExpectedValues == null))
                {
                    this.mShouldHaveDeleteButtonExpectedValues = new ShouldHaveDeleteButtonExpectedValues();
                }
                return this.mShouldHaveDeleteButtonExpectedValues;
            }
        }
        
        public virtual ShouldHaveCommentDeleteButtonExpectedValues ShouldHaveCommentDeleteButtonExpectedValues
        {
            get
            {
                if ((this.mShouldHaveCommentDeleteButtonExpectedValues == null))
                {
                    this.mShouldHaveCommentDeleteButtonExpectedValues = new ShouldHaveCommentDeleteButtonExpectedValues();
                }
                return this.mShouldHaveCommentDeleteButtonExpectedValues;
            }
        }
        
        public virtual TypeWrongLoginCredentialsParams TypeWrongLoginCredentialsParams
        {
            get
            {
                if ((this.mTypeWrongLoginCredentialsParams == null))
                {
                    this.mTypeWrongLoginCredentialsParams = new TypeWrongLoginCredentialsParams();
                }
                return this.mTypeWrongLoginCredentialsParams;
            }
        }
        
        public virtual ShouldDisplayInvalidLoginMessageExpectedValues ShouldDisplayInvalidLoginMessageExpectedValues
        {
            get
            {
                if ((this.mShouldDisplayInvalidLoginMessageExpectedValues == null))
                {
                    this.mShouldDisplayInvalidLoginMessageExpectedValues = new ShouldDisplayInvalidLoginMessageExpectedValues();
                }
                return this.mShouldDisplayInvalidLoginMessageExpectedValues;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow UIIndexMyDiaryMozillaFWindow
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow = new UIIndexMyDiaryMozillaFWindow();
                }
                return this.mUIIndexMyDiaryMozillaFWindow;
            }
        }
        
        public UILoginMyDiaryMozillaFWindow UILoginMyDiaryMozillaFWindow
        {
            get
            {
                if ((this.mUILoginMyDiaryMozillaFWindow == null))
                {
                    this.mUILoginMyDiaryMozillaFWindow = new UILoginMyDiaryMozillaFWindow();
                }
                return this.mUILoginMyDiaryMozillaFWindow;
            }
        }
        
        public UILoginMyDiaryMozillaFWindow1 UILoginMyDiaryMozillaFWindow1
        {
            get
            {
                if ((this.mUILoginMyDiaryMozillaFWindow1 == null))
                {
                    this.mUILoginMyDiaryMozillaFWindow1 = new UILoginMyDiaryMozillaFWindow1();
                }
                return this.mUILoginMyDiaryMozillaFWindow1;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow1 UIIndexMyDiaryMozillaFWindow1
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow1 == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow1 = new UIIndexMyDiaryMozillaFWindow1();
                }
                return this.mUIIndexMyDiaryMozillaFWindow1;
            }
        }
        
        public UIDetailsMyDiaryMozillWindow UIDetailsMyDiaryMozillWindow
        {
            get
            {
                if ((this.mUIDetailsMyDiaryMozillWindow == null))
                {
                    this.mUIDetailsMyDiaryMozillWindow = new UIDetailsMyDiaryMozillWindow();
                }
                return this.mUIDetailsMyDiaryMozillWindow;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow2 UIIndexMyDiaryMozillaFWindow2
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow2 == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow2 = new UIIndexMyDiaryMozillaFWindow2();
                }
                return this.mUIIndexMyDiaryMozillaFWindow2;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow3 UIIndexMyDiaryMozillaFWindow3
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow3 == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow3 = new UIIndexMyDiaryMozillaFWindow3();
                }
                return this.mUIIndexMyDiaryMozillaFWindow3;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow4 UIIndexMyDiaryMozillaFWindow4
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow4 == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow4 = new UIIndexMyDiaryMozillaFWindow4();
                }
                return this.mUIIndexMyDiaryMozillaFWindow4;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow5 UIIndexMyDiaryMozillaFWindow5
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow5 == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow5 = new UIIndexMyDiaryMozillaFWindow5();
                }
                return this.mUIIndexMyDiaryMozillaFWindow5;
            }
        }
        
        public UIIndexMyDiaryMozillaFWindow6 UIIndexMyDiaryMozillaFWindow6
        {
            get
            {
                if ((this.mUIIndexMyDiaryMozillaFWindow6 == null))
                {
                    this.mUIIndexMyDiaryMozillaFWindow6 = new UIIndexMyDiaryMozillaFWindow6();
                }
                return this.mUIIndexMyDiaryMozillaFWindow6;
            }
        }
        
        public UIProfileMyDiaryMozillWindow UIProfileMyDiaryMozillWindow
        {
            get
            {
                if ((this.mUIProfileMyDiaryMozillWindow == null))
                {
                    this.mUIProfileMyDiaryMozillWindow = new UIProfileMyDiaryMozillWindow();
                }
                return this.mUIProfileMyDiaryMozillWindow;
            }
        }
        
        public UIIndexMyDiaryInternetWindow UIIndexMyDiaryInternetWindow
        {
            get
            {
                if ((this.mUIIndexMyDiaryInternetWindow == null))
                {
                    this.mUIIndexMyDiaryInternetWindow = new UIIndexMyDiaryInternetWindow();
                }
                return this.mUIIndexMyDiaryInternetWindow;
            }
        }
        #endregion
        
        #region Fields
        private LoginParams mLoginParams;
        
        private GoToArticleDetailsParams mGoToArticleDetailsParams;
        
        private ProfileUsernameContainsAdminExpectedValues mProfileUsernameContainsAdminExpectedValues;
        
        private LoginToAdminParams mLoginToAdminParams;
        
        private CheckIfHelloBannerExistsExpectedValues mCheckIfHelloBannerExistsExpectedValues;
        
        private LoginAndLogoutParams mLoginAndLogoutParams;
        
        private LoginButtonShouldExistsExpectedValues mLoginButtonShouldExistsExpectedValues;
        
        private ArticleShouldHaveProperTitleExpectedValues mArticleShouldHaveProperTitleExpectedValues;
        
        private CheckIfUserHasMailOnProfilePageExpectedValues mCheckIfUserHasMailOnProfilePageExpectedValues;
        
        private CheckIfCommentIndexPageIsShownExpectedValues mCheckIfCommentIndexPageIsShownExpectedValues;
        
        private ShouldHaveDeleteButtonExpectedValues mShouldHaveDeleteButtonExpectedValues;
        
        private ShouldHaveCommentDeleteButtonExpectedValues mShouldHaveCommentDeleteButtonExpectedValues;
        
        private TypeWrongLoginCredentialsParams mTypeWrongLoginCredentialsParams;
        
        private ShouldDisplayInvalidLoginMessageExpectedValues mShouldDisplayInvalidLoginMessageExpectedValues;
        
        private UIIndexMyDiaryMozillaFWindow mUIIndexMyDiaryMozillaFWindow;
        
        private UILoginMyDiaryMozillaFWindow mUILoginMyDiaryMozillaFWindow;
        
        private UILoginMyDiaryMozillaFWindow1 mUILoginMyDiaryMozillaFWindow1;
        
        private UIIndexMyDiaryMozillaFWindow1 mUIIndexMyDiaryMozillaFWindow1;
        
        private UIDetailsMyDiaryMozillWindow mUIDetailsMyDiaryMozillWindow;
        
        private UIIndexMyDiaryMozillaFWindow2 mUIIndexMyDiaryMozillaFWindow2;
        
        private UIIndexMyDiaryMozillaFWindow3 mUIIndexMyDiaryMozillaFWindow3;
        
        private UIIndexMyDiaryMozillaFWindow4 mUIIndexMyDiaryMozillaFWindow4;
        
        private UIIndexMyDiaryMozillaFWindow5 mUIIndexMyDiaryMozillaFWindow5;
        
        private UIIndexMyDiaryMozillaFWindow6 mUIIndexMyDiaryMozillaFWindow6;
        
        private UIProfileMyDiaryMozillWindow mUIProfileMyDiaryMozillWindow;
        
        private UIIndexMyDiaryInternetWindow mUIIndexMyDiaryInternetWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Login'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@gmail.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "MbpNujeywyxG6UUEWiPzQ6OUaJ1XsZySKO8mPS5P0mn2nw8YcVgMCQ==";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GoToArticleDetails'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class GoToArticleDetailsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@gmail.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "WFNdi1z+Fh1a40gG3A8Sg1VV9grx54QV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ProfileUsernameContainsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ProfileUsernameContainsAdminExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Username' text box contains 'admin'
        /// </summary>
        public string UIUsernameEditText = "admin";
        
        /// <summary>
        /// Verify that the 'Text' property of 'Username' text box contains 'admin'
        /// </summary>
        public string UIUsernameEditText1 = "admin";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginToAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginToAdminParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@gmail.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "WFNdi1z+Fh1a40gG3A8Sg1VV9grx54QV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckIfHelloBannerExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckIfHelloBannerExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Hello admin@gmail.com!' link equals 'Hello admin@gmail.com!'
        /// </summary>
        public string UIHelloadmingmailcomHyperlinkFriendlyName = "Hello admin@gmail.com!";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginAndLogout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginAndLogoutParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@gmail.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "WFNdi1z+Fh1a40gG3A8Sg1VV9grx54QV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginButtonShouldExists'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginButtonShouldExistsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Login' link equals 'Login'
        /// </summary>
        public string UILoginHyperlinkFriendlyName = "Login";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ArticleShouldHaveProperTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ArticleShouldHaveProperTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Super Article' cell equals 'Super Article'
        /// </summary>
        public string UISuperArticleCellFriendlyName = "Super Article";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckIfUserHasMailOnProfilePage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckIfUserHasMailOnProfilePageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Email' text box equals 'admin@gmail.com'
        /// </summary>
        public string UIEmailEditText = "admin@gmail.com";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckIfCommentIndexPageIsShown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CheckIfCommentIndexPageIsShownExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of custom control equals 'My Comments'
        /// </summary>
        public string UIItemCustomInnerText = "My Comments";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShouldHaveDeleteButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ShouldHaveDeleteButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Delete' button equals 'Delete'
        /// </summary>
        public string UIDeleteButtonDisplayText = "Delete";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShouldHaveCommentDeleteButton'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ShouldHaveCommentDeleteButtonExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Delete' button equals 'Delete'
        /// </summary>
        public string UIDeleteButtonDisplayText = "Delete";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TypeWrongLoginCredentials'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class TypeWrongLoginCredentialsParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'badinput@gmail.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "badinput@gmail.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "q5SCN8Bs0GC3KS1pZ6iRkDSkSsUExU+1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ShouldDisplayInvalidLoginMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ShouldDisplayInvalidLoginMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Invalid login attempt.' custom control equals 'Invalid login attempt.'
        /// </summary>
        public string UIInvalidloginattemptCustomInnerText = "Invalid login attempt.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UILoginHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new UILoginHyperlink(this);
                }
                return this.mUILoginHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UILoginHyperlink mUILoginHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginHyperlink : WinHyperlink
    {
        
        public UILoginHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Login";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UILoginEdit
        {
            get
            {
                if ((this.mUILoginEdit == null))
                {
                    this.mUILoginEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILoginEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Login";
                    this.mUILoginEdit.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUILoginEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILoginEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginMyDiaryMozillaFWindow : WinWindow
    {
        
        public UILoginMyDiaryMozillaFWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Log in - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UILoginMyDiaryDocument UILoginMyDiaryDocument
        {
            get
            {
                if ((this.mUILoginMyDiaryDocument == null))
                {
                    this.mUILoginMyDiaryDocument = new UILoginMyDiaryDocument(this);
                }
                return this.mUILoginMyDiaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UILoginMyDiaryDocument mUILoginMyDiaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginMyDiaryDocument : WinControl
    {
        
        public UILoginMyDiaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Log in - MyDiary";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public WinCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WinCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["Instance"] = "3";
                    this.mUIItemCustom.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public WinButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WinButton.PropertyNames.Name] = "Log in";
                    this.mUILoginButton.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIEmailEdit;
        
        private WinCustom mUIItemCustom;
        
        private WinEdit mUIPasswordEdit;
        
        private WinButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginMyDiaryMozillaFWindow1 : WinWindow
    {
        
        public UILoginMyDiaryMozillaFWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Log in - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Log in - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIItemListItem UIItemListItem
        {
            get
            {
                if ((this.mUIItemListItem == null))
                {
                    this.mUIItemListItem = new UIItemListItem(this);
                }
                return this.mUIItemListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemListItem mUIItemListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemListItem : WinListItem
    {
        
        public UIItemListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WinButton.PropertyNames.Name] = "Logout";
                    this.mUILogoutButton.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow1 : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Details - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIDetailsHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new UIDetailsHyperlink(this);
                }
                return this.mUIDetailsHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsHyperlink mUIDetailsHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsHyperlink : WinHyperlink
    {
        
        public UIDetailsHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Details";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIDetailsEdit
        {
            get
            {
                if ((this.mUIDetailsEdit == null))
                {
                    this.mUIDetailsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDetailsEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Details";
                    this.mUIDetailsEdit.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIDetailsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIDetailsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsMyDiaryMozillWindow : WinWindow
    {
        
        public UIDetailsMyDiaryMozillWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Details - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Details - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIItemCell UIItemCell
        {
            get
            {
                if ((this.mUIItemCell == null))
                {
                    this.mUIItemCell = new UIItemCell(this);
                }
                return this.mUIItemCell;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCell mUIItemCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCell : WinCell
    {
        
        public UIItemCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Details - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UISuperArticleEdit
        {
            get
            {
                if ((this.mUISuperArticleEdit == null))
                {
                    this.mUISuperArticleEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISuperArticleEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Super Article ";
                    this.mUISuperArticleEdit.WindowTitles.Add("Details - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUISuperArticleEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISuperArticleEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow2 : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIHelloadmingmailcomHyperlink UIHelloadmingmailcomHyperlink
        {
            get
            {
                if ((this.mUIHelloadmingmailcomHyperlink == null))
                {
                    this.mUIHelloadmingmailcomHyperlink = new UIHelloadmingmailcomHyperlink(this);
                }
                return this.mUIHelloadmingmailcomHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIHelloadmingmailcomHyperlink mUIHelloadmingmailcomHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHelloadmingmailcomHyperlink : WinHyperlink
    {
        
        public UIHelloadmingmailcomHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Hello admin@gmail.com!";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIHelloadmingmailcomEdit
        {
            get
            {
                if ((this.mUIHelloadmingmailcomEdit == null))
                {
                    this.mUIHelloadmingmailcomEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIHelloadmingmailcomEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Hello admin@gmail.com!";
                    this.mUIHelloadmingmailcomEdit.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIHelloadmingmailcomEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIHelloadmingmailcomEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow3 : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIPersonaldataHyperlink UIPersonaldataHyperlink
        {
            get
            {
                if ((this.mUIPersonaldataHyperlink == null))
                {
                    this.mUIPersonaldataHyperlink = new UIPersonaldataHyperlink(this);
                }
                return this.mUIPersonaldataHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIPersonaldataHyperlink mUIPersonaldataHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPersonaldataHyperlink : WinHyperlink
    {
        
        public UIPersonaldataHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Personal data";
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIPersonaldataEdit
        {
            get
            {
                if ((this.mUIPersonaldataEdit == null))
                {
                    this.mUIPersonaldataEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPersonaldataEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Personal data";
                    this.mUIPersonaldataEdit.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPersonaldataEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPersonaldataEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow4 : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UITwofactorauthenticatHyperlink UITwofactorauthenticatHyperlink
        {
            get
            {
                if ((this.mUITwofactorauthenticatHyperlink == null))
                {
                    this.mUITwofactorauthenticatHyperlink = new UITwofactorauthenticatHyperlink(this);
                }
                return this.mUITwofactorauthenticatHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UITwofactorauthenticatHyperlink mUITwofactorauthenticatHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITwofactorauthenticatHyperlink : WinHyperlink
    {
        
        public UITwofactorauthenticatHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Two-factor authentication";
            this.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UITwofactorauthenticatEdit
        {
            get
            {
                if ((this.mUITwofactorauthenticatEdit == null))
                {
                    this.mUITwofactorauthenticatEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITwofactorauthenticatEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Two-factor authentication";
                    this.mUITwofactorauthenticatEdit.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUITwofactorauthenticatEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITwofactorauthenticatEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow5 : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIPasswordHyperlink UIPasswordHyperlink
        {
            get
            {
                if ((this.mUIPasswordHyperlink == null))
                {
                    this.mUIPasswordHyperlink = new UIPasswordHyperlink(this);
                }
                return this.mUIPasswordHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIPasswordHyperlink mUIPasswordHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasswordHyperlink : WinHyperlink
    {
        
        public UIPasswordHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Password";
            this.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryMozillaFWindow6 : WinWindow
    {
        
        public UIIndexMyDiaryMozillaFWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Index - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Index - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Personal Data - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Two-factor authentication (2FA) - MyDiary - Mozilla Firefox");
            this.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIProfileHyperlink UIProfileHyperlink
        {
            get
            {
                if ((this.mUIProfileHyperlink == null))
                {
                    this.mUIProfileHyperlink = new UIProfileHyperlink(this);
                }
                return this.mUIProfileHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIProfileHyperlink mUIProfileHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProfileHyperlink : WinHyperlink
    {
        
        public UIProfileHyperlink(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinHyperlink.PropertyNames.Name] = "Profile";
            this.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIProfileEdit
        {
            get
            {
                if ((this.mUIProfileEdit == null))
                {
                    this.mUIProfileEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIProfileEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Profile";
                    this.mUIProfileEdit.WindowTitles.Add("Change password - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIProfileEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIProfileEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProfileMyDiaryMozillWindow : WinWindow
    {
        
        public UIProfileMyDiaryMozillWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Profile - MyDiary - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIProfileMyDiaryDocument UIProfileMyDiaryDocument
        {
            get
            {
                if ((this.mUIProfileMyDiaryDocument == null))
                {
                    this.mUIProfileMyDiaryDocument = new UIProfileMyDiaryDocument(this);
                }
                return this.mUIProfileMyDiaryDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIProfileMyDiaryDocument mUIProfileMyDiaryDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProfileMyDiaryDocument : WinControl
    {
        
        public UIProfileMyDiaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Profile - MyDiary";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIUsernameEdit
        {
            get
            {
                if ((this.mUIUsernameEdit == null))
                {
                    this.mUIUsernameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIUsernameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Username";
                    this.mUIUsernameEdit.WindowTitles.Add("Profile - MyDiary - Mozilla Firefox");
                    #endregion
                }
                return this.mUIUsernameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIUsernameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryInternetWindow : BrowserWindow
    {
        
        public UIIndexMyDiaryInternetWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Index - MyDiary";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Index - MyDiary");
            this.WindowTitles.Add("Log in - MyDiary");
            this.WindowTitles.Add("Details - MyDiary");
            this.WindowTitles.Add("Profile - MyDiary");
            this.WindowTitles.Add("Create - MyDiary");
            this.WindowTitles.Add("Delete - MyDiary");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIIndexMyDiaryDocument UIIndexMyDiaryDocument
        {
            get
            {
                if ((this.mUIIndexMyDiaryDocument == null))
                {
                    this.mUIIndexMyDiaryDocument = new UIIndexMyDiaryDocument(this);
                }
                return this.mUIIndexMyDiaryDocument;
            }
        }
        
        public UILoginMyDiaryDocument1 UILoginMyDiaryDocument
        {
            get
            {
                if ((this.mUILoginMyDiaryDocument == null))
                {
                    this.mUILoginMyDiaryDocument = new UILoginMyDiaryDocument1(this);
                }
                return this.mUILoginMyDiaryDocument;
            }
        }
        
        public UIDetailsMyDiaryDocument UIDetailsMyDiaryDocument
        {
            get
            {
                if ((this.mUIDetailsMyDiaryDocument == null))
                {
                    this.mUIDetailsMyDiaryDocument = new UIDetailsMyDiaryDocument(this);
                }
                return this.mUIDetailsMyDiaryDocument;
            }
        }
        
        public UIProfileMyDiaryDocument1 UIProfileMyDiaryDocument
        {
            get
            {
                if ((this.mUIProfileMyDiaryDocument == null))
                {
                    this.mUIProfileMyDiaryDocument = new UIProfileMyDiaryDocument1(this);
                }
                return this.mUIProfileMyDiaryDocument;
            }
        }
        
        public UIIndexMyDiaryDocument1 UIIndexMyDiaryDocument1
        {
            get
            {
                if ((this.mUIIndexMyDiaryDocument1 == null))
                {
                    this.mUIIndexMyDiaryDocument1 = new UIIndexMyDiaryDocument1(this);
                }
                return this.mUIIndexMyDiaryDocument1;
            }
        }
        
        public UICreateMyDiaryDocument UICreateMyDiaryDocument
        {
            get
            {
                if ((this.mUICreateMyDiaryDocument == null))
                {
                    this.mUICreateMyDiaryDocument = new UICreateMyDiaryDocument(this);
                }
                return this.mUICreateMyDiaryDocument;
            }
        }
        
        public UIIndexMyDiaryDocument2 UIIndexMyDiaryDocument2
        {
            get
            {
                if ((this.mUIIndexMyDiaryDocument2 == null))
                {
                    this.mUIIndexMyDiaryDocument2 = new UIIndexMyDiaryDocument2(this);
                }
                return this.mUIIndexMyDiaryDocument2;
            }
        }
        
        public UIDeleteMyDiaryDocument UIDeleteMyDiaryDocument
        {
            get
            {
                if ((this.mUIDeleteMyDiaryDocument == null))
                {
                    this.mUIDeleteMyDiaryDocument = new UIDeleteMyDiaryDocument(this);
                }
                return this.mUIDeleteMyDiaryDocument;
            }
        }
        
        public UIDeleteMyDiaryDocument1 UIDeleteMyDiaryDocument1
        {
            get
            {
                if ((this.mUIDeleteMyDiaryDocument1 == null))
                {
                    this.mUIDeleteMyDiaryDocument1 = new UIDeleteMyDiaryDocument1(this);
                }
                return this.mUIDeleteMyDiaryDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIIndexMyDiaryDocument mUIIndexMyDiaryDocument;
        
        private UILoginMyDiaryDocument1 mUILoginMyDiaryDocument;
        
        private UIDetailsMyDiaryDocument mUIDetailsMyDiaryDocument;
        
        private UIProfileMyDiaryDocument1 mUIProfileMyDiaryDocument;
        
        private UIIndexMyDiaryDocument1 mUIIndexMyDiaryDocument1;
        
        private UICreateMyDiaryDocument mUICreateMyDiaryDocument;
        
        private UIIndexMyDiaryDocument2 mUIIndexMyDiaryDocument2;
        
        private UIDeleteMyDiaryDocument mUIDeleteMyDiaryDocument;
        
        private UIDeleteMyDiaryDocument1 mUIDeleteMyDiaryDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryDocument : HtmlDocument
    {
        
        public UIIndexMyDiaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Index - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Articles/Index";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Articles/Index";
            this.WindowTitles.Add("Index - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Identity/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Identity/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-white";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-link text-white\" href=\"/Ident";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUILoginHyperlink.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        
        public HtmlHyperlink UIHelloadmingmailcomHyperlink
        {
            get
            {
                if ((this.mUIHelloadmingmailcomHyperlink == null))
                {
                    this.mUIHelloadmingmailcomHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHelloadmingmailcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHelloadmingmailcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHelloadmingmailcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHelloadmingmailcomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Hello admin@gmail.com!";
                    this.mUIHelloadmingmailcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Identity/Account/Manage";
                    this.mUIHelloadmingmailcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Manage";
                    this.mUIHelloadmingmailcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Identity/Account/Manage";
                    this.mUIHelloadmingmailcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-white";
                    this.mUIHelloadmingmailcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"Manage\" class=\"nav-link text-whit";
                    this.mUIHelloadmingmailcomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHelloadmingmailcomHyperlink.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUIHelloadmingmailcomHyperlink;
            }
        }
        
        public HtmlButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Logout";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Class] = "nav-link btn btn-link text-white";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"nav-link btn btn-link text-white\"";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILogoutButton.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Articles/Details/9";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Articles/Details/9";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Articles/Details/9\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete | ";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Articles/Delete/9";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Articles/Delete/9";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Articles/Delete/9\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUILoginHyperlink;
        
        private HtmlHyperlink mUIHelloadmingmailcomHyperlink;
        
        private HtmlButton mUILogoutButton;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginMyDiaryDocument1 : HtmlDocument
    {
        
        public UILoginMyDiaryDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Identity/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Identity/Account/Login";
            this.WindowTitles.Add("Log in - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Email\" class=\"form-control\" ";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - MyDiary");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Password";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Password\" class=\"form-contro";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - MyDiary");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public UIAccountCustom UIAccountCustom
        {
            get
            {
                if ((this.mUIAccountCustom == null))
                {
                    this.mUIAccountCustom = new UIAccountCustom(this);
                }
                return this.mUIAccountCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private UIAccountCustom mUIAccountCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAccountCustom : HtmlCustom
    {
        
        public UIAccountCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "account";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"account\" method=\"post\" novalidate=\"n";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Log in - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log in";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-primary";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-primary\" type=\"submit\"";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "1";
                    this.mUILoginButton.WindowTitles.Add("Log in - MyDiary");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public HtmlCustom UIInvalidloginattemptCustom
        {
            get
            {
                if ((this.mUIInvalidloginattemptCustom == null))
                {
                    this.mUIInvalidloginattemptCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIInvalidloginattemptCustom.SearchProperties["TagName"] = "LI";
                    this.mUIInvalidloginattemptCustom.SearchProperties["Id"] = null;
                    this.mUIInvalidloginattemptCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIInvalidloginattemptCustom.FilterProperties["Class"] = null;
                    this.mUIInvalidloginattemptCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIInvalidloginattemptCustom.FilterProperties["InnerText"] = "Invalid login attempt.";
                    this.mUIInvalidloginattemptCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIInvalidloginattemptCustom.WindowTitles.Add("Log in - MyDiary");
                    #endregion
                }
                return this.mUIInvalidloginattemptCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlButton mUILoginButton;
        
        private HtmlCustom mUIInvalidloginattemptCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsMyDiaryDocument : HtmlDocument
    {
        
        public UIDetailsMyDiaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Articles/Details/9";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Articles/Details/9";
            this.WindowTitles.Add("Details - MyDiary");
            #endregion
        }
        
        #region Properties
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIMyDiaryHyperlink
        {
            get
            {
                if ((this.mUIMyDiaryHyperlink == null))
                {
                    this.mUIMyDiaryHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "MyDiary";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Articles";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Articles";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "navbar-brand text-white";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"navbar-brand text-white\" href=\"/A";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIMyDiaryHyperlink.WindowTitles.Add("Details - MyDiary");
                    #endregion
                }
                return this.mUIMyDiaryHyperlink;
            }
        }
        
        public HtmlHyperlink UIAddacommentHyperlink
        {
            get
            {
                if ((this.mUIAddacommentHyperlink == null))
                {
                    this.mUIAddacommentHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddacommentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAddacommentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddacommentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddacommentHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add a comment";
                    this.mUIAddacommentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Comments/Create/9";
                    this.mUIAddacommentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddacommentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Comments/Create/9";
                    this.mUIAddacommentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAddacommentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Comments/Create/9\"";
                    this.mUIAddacommentHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIAddacommentHyperlink.WindowTitles.Add("Details - MyDiary");
                    #endregion
                }
                return this.mUIAddacommentHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete |";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Comments/Delete/31";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Comments/Delete/31";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Comments/Delete/31\"";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "10";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Details - MyDiary");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTable mUIItemTable;
        
        private HtmlHyperlink mUIMyDiaryHyperlink;
        
        private HtmlHyperlink mUIAddacommentHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Super Article By: admin@gmail.com Edit |";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "4";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "3";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Details - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlCell UISuperArticleCell
        {
            get
            {
                if ((this.mUISuperArticleCell == null))
                {
                    this.mUISuperArticleCell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUISuperArticleCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUISuperArticleCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUISuperArticleCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUISuperArticleCell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "Super Article ";
                    this.mUISuperArticleCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUISuperArticleCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUISuperArticleCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "0";
                    this.mUISuperArticleCell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUISuperArticleCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "1";
                    this.mUISuperArticleCell.WindowTitles.Add("Details - MyDiary");
                    #endregion
                }
                return this.mUISuperArticleCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUISuperArticleCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProfileMyDiaryDocument1 : HtmlDocument
    {
        
        public UIProfileMyDiaryDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Profile - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Identity/Account/Manage";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Identity/Account/Manage";
            this.WindowTitles.Add("Profile - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Input_Email";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Input.Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Input.Email\" class=\"form-control\" ";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIEmailEdit.WindowTitles.Add("Profile - MyDiary");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlHyperlink UIMyDiaryHyperlink
        {
            get
            {
                if ((this.mUIMyDiaryHyperlink == null))
                {
                    this.mUIMyDiaryHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIMyDiaryHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "MyDiary";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "navbar-brand";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"navbar-brand\" href=\"/\"";
                    this.mUIMyDiaryHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "1";
                    this.mUIMyDiaryHyperlink.WindowTitles.Add("Profile - MyDiary");
                    #endregion
                }
                return this.mUIMyDiaryHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlHyperlink mUIMyDiaryHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryDocument1 : HtmlDocument
    {
        
        public UIIndexMyDiaryDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Index - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Articles";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Articles";
            this.WindowTitles.Add("Index - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Articles/Details/9";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Articles/Details/9";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Articles/Details/9\"";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "9";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Identity/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Identity/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "nav-link text-white";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"nav-link text-white\" href=\"/Ident";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUILoginHyperlink.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUILoginHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateMyDiaryDocument : HtmlDocument
    {
        
        public UICreateMyDiaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Comments/Create/9";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Comments/Create/9";
            this.WindowTitles.Add("Create - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Comments";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://localhost:5001/Comments";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Comments\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Create - MyDiary");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIIndexMyDiaryDocument2 : HtmlDocument
    {
        
        public UIIndexMyDiaryDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Index - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Comments";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Comments";
            this.WindowTitles.Add("Index - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "H1";
                    this.mUIItemCustom.SearchProperties["Id"] = null;
                    this.mUIItemCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUIItemCustom.FilterProperties["Class"] = null;
                    this.mUIItemCustom.FilterProperties["ControlDefinition"] = null;
                    this.mUIItemCustom.FilterProperties["TagInstance"] = "1";
                    this.mUIItemCustom.WindowTitles.Add("Index - MyDiary");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteMyDiaryDocument : HtmlDocument
    {
        
        public UIDeleteMyDiaryDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Articles/Delete/9";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Articles/Delete/9";
            this.WindowTitles.Add("Delete - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" type=\"submit\" val";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - MyDiary");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteMyDiaryDocument1 : HtmlDocument
    {
        
        public UIDeleteMyDiaryDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - MyDiary";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Comments/Delete/31";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://localhost:5001/Comments/Delete/31";
            this.WindowTitles.Add("Delete - MyDiary");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-danger";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-danger\" type=\"submit\" val";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - MyDiary");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
}
